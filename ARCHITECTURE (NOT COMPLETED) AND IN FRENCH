kernel/
├── arch/                           # Architectures supportées
│   ├── x86/                        # Architecture x86 (32/64-bit)
│   │   ├── boot/
│   │   │   ├── bootloader.S        # Code d'amorçage
│   │   │   ├── multiboot.S         # Support Multiboot2
│   │   │   ├── early_init.S        # Initialisation précoce
│   │   │   ├── header.S            # En-têtes boot
│   │   │   ├── video.c             # Configuration vidéo boot
│   │   │   ├── memory.c            # Détection mémoire E820
│   │   │   ├── compressed/         # Kernel compressé
│   │   │   │   ├── misc.c          # Utilitaires décompression
│   │   │   │   ├── string.c        # Fonctions string boot
│   │   │   │   └── piggy.S         # Payload compressé
│   │   │   └── tools/              # Outils de build
│   │   │       ├── build.c         # Construction image boot
│   │   │       └── mkcpustr.c      # Génération CPU strings
│   │   ├── entry/
│   │   │   ├── entry_64.S          # Points d'entrée 64-bit
│   │   │   ├── entry_32.S          # Points d'entrée 32-bit
│   │   │   ├── syscall_64.c        # Appels système 64-bit
│   │   │   ├── syscall_32.c        # Appels système 32-bit
│   │   │   ├── vsyscall/           # Virtual syscalls
│   │   │   │   ├── vsyscall_64.c   # vDSO 64-bit
│   │   │   │   └── vdso/           # Virtual DSO
│   │   │   │       ├── vdso.lds.S  # Linker script vDSO
│   │   │   │       ├── vclock_gettime.c # vDSO clock
│   │   │   │       └── vgetcpu.c   # vDSO getcpu
│   │   │   └── common.c            # Code commun entry
│   │   ├── kernel/
│   │   │   ├── process.c           # Gestion processus x86
│   │   │   ├── process_32.c        # Processus 32-bit
│   │   │   ├── process_64.c        # Processus 64-bit
│   │   │   ├── signal.c            # Signaux x86
│   │   │   ├── signal_32.c         # Signaux 32-bit
│   │   │   ├── signal_64.c         # Signaux 64-bit
│   │   │   ├── traps.c             # Gestion traps
│   │   │   ├── ioport.c            # Ports I/O
│   │   │   ├── ldt.c               # Local Descriptor Table
│   │   │   ├── setup.c             # Configuration système
│   │   │   ├── setup_percpu.c      # Setup per-CPU
│   │   │   ├── dumpstack.c         # Dump stack traces
│   │   │   ├── dumpstack_32.c      # Stack dump 32-bit
│   │   │   ├── dumpstack_64.c      # Stack dump 64-bit
│   │   │   ├── stacktrace.c        # Stack tracing
│   │   │   ├── reboot.c            # Redémarrage système
│   │   │   ├── machine_kexec_64.c  # Kexec 64-bit
│   │   │   ├── crash.c             # Crash dumps
│   │   │   ├── crash_dump_64.c     # Crash dump 64-bit
│   │   │   ├── kprobes/            # Kernel probes x86
│   │   │   │   ├── core.c          # Core kprobes
│   │   │   │   ├── opt.c           # Optimized probes
│   │   │   │   └── ftrace.c        # Ftrace integration
│   │   │   ├── kgdb.c              # Kernel debugger
│   │   │   ├── alternative.c       # Code patching
│   │   │   ├── paravirt.c          # Paravirtualization
│   │   │   ├── paravirt_patch.c    # Paravirt patching
│   │   │   ├── pvclock.c           # Paravirt clock
│   │   │   ├── kvmclock.c          # KVM clock
│   │   │   ├── tboot.c             # Trusted boot
│   │   │   ├── intel_txt.c         # Intel TXT
│   │   │   ├── mpparse.c           # MP table parsing
│   │   │   ├── topology.c          # CPU topology
│   │   │   ├── smpboot.c           # SMP boot
│   │   │   ├── smp.c               # SMP operations
│   │   │   ├── cpu/
│   │   │   │   ├── common.c        # Code CPU commun
│   │   │   │   ├── intel.c         # Support Intel
│   │   │   │   ├── amd.c           # Support AMD
│   │   │   │   ├── via.c           # Support VIA
│   │   │   │   ├── centaur.c       # Support Centaur
│   │   │   │   ├── cyrix.c         # Support Cyrix
│   │   │   │   ├── topology.c      # Topologie CPU
│   │   │   │   ├── scattered.c     # Features éparpillées
│   │   │   │   ├── match.c         # Matching CPU
│   │   │   │   ├── bugs.c          # CPU bugs/workarounds
│   │   │   │   ├── mcheck/         # Machine check
│   │   │   │   │   ├── mce.c       # MCE core
│   │   │   │   │   ├── mce-severity.c # Sévérité MCE
│   │   │   │   │   ├── mce_amd.c   # MCE AMD
│   │   │   │   │   ├── mce-inject.c # Injection MCE
│   │   │   │   │   ├── dev-mcelog.c # Interface mcelog
│   │   │   │   │   ├── threshold.c  # Seuils MCE
│   │   │   │   │   └── therm_throt.c # Thermal throttle
│   │   │   │   ├── microcode/      # Microcode
│   │   │   │   │   ├── core.c      # Core microcode
│   │   │   │   │   ├── intel.c     # Microcode Intel
│   │   │   │   │   └── amd.c       # Microcode AMD
│   │   │   │   ├── resctrl/        # Resource control
│   │   │   │   │   ├── core.c      # RDT core
│   │   │   │   │   ├── rdtgroup.c  # RDT groups
│   │   │   │   │   ├── monitor.c   # Monitoring
│   │   │   │   │   └── ctrlmondata.c # Control/monitor data
│   │   │   │   └── perf_event.c    # Performance events
│   │   │   ├── apic/
│   │   │   │   ├── apic.c          # APIC local
│   │   │   │   ├── apic_flat_64.c  # APIC flat 64-bit
│   │   │   │   ├── apic_noop.c     # APIC no-op
│   │   │   │   ├── bigsmp_32.c     # BigSMP 32-bit
│   │   │   │   ├── probe_32.c      # APIC probe 32-bit
│   │   │   │   ├── probe_64.c      # APIC probe 64-bit
│   │   │   │   ├── io_apic.c       # I/O APIC
│   │   │   │   ├── msi.c           # MSI support
│   │   │   │   ├── vector.c        # Vector management
│   │   │   │   ├── ipi.c           # Inter-processor interrupts
│   │   │   │   ├── hw_nmi.c        # Hardware NMI
│   │   │   │   └── x2apic/         # x2APIC support
│   │   │   │       ├── x2apic_phys.c # x2APIC physical
│   │   │   │       ├── x2apic_cluster.c # x2APIC cluster
│   │   │   │       └── x2apic_uv_x.c # UV x2APIC
│   │   │   ├── fpu/
│   │   │   │   ├── core.c          # FPU core
│   │   │   │   ├── init.c          # FPU initialization
│   │   │   │   ├── regset.c        # FPU regset
│   │   │   │   ├── signal.c        # FPU signals
│   │   │   │   ├── xstate.c        # Extended state
│   │   │   │   └── bugs.c          # FPU bugs
│   │   │   └── unwind/             # Stack unwinding
│   │   │       ├── orc.c           # ORC unwinder
│   │   │       ├── frame.c         # Frame pointer unwinder
│   │   │       └── guess.c         # Guess unwinder
│   │   ├── mm/
│   │   │   ├── init.c              # Initialisation mémoire
│   │   │   ├── init_32.c           # Init mémoire 32-bit
│   │   │   ├── init_64.c           # Init mémoire 64-bit
│   │   │   ├── fault.c             # Page faults
│   │   │   ├── tlb.c               # TLB management
│   │   │   ├── pgtable.c           # Page tables
│   │   │   ├── pgtable_32.c        # Page tables 32-bit
│   │   │   ├── pgtable_64.c        # Page tables 64-bit
│   │   │   ├── physaddr.c          # Adresses physiques
│   │   │   ├── pat.c               # Page Attribute Table
│   │   │   ├── pageattr.c          # Attributs pages
│   │   │   ├── ioremap.c           # I/O remapping
│   │   │   ├── kasan_init_64.c     # KASAN init 64-bit
│   │   │   ├── kaslr.c             # KASLR support
│   │   │   ├── mem_encrypt.c       # Memory encryption
│   │   │   ├── mem_encrypt_identity.c # SME identity mapping
│   │   │   ├── debug_pagetables.c  # Debug page tables
│   │   │   ├── dump_pagetables.c   # Dump page tables
│   │   │   ├── highmem_32.c        # High memory 32-bit
│   │   │   ├── hugetlbpage.c       # Huge pages
│   │   │   ├── numa.c              # NUMA support
│   │   │   ├── numa_64.c           # NUMA 64-bit
│   │   │   ├── numa_32.c           # NUMA 32-bit
│   │   │   ├── amdtopology.c       # AMD topology
│   │   │   ├── srat.c              # SRAT parsing
│   │   │   ├── mpx.c               # Memory Protection Extensions
│   │   │   ├── pkeys.c             # Protection Keys
│   │   │   └── extable.c           # Exception table
│   │   ├── platform/
│   │   │   ├── efi/                # EFI support
│   │   │   │   ├── efi.c           # EFI core
│   │   │   │   ├── efi_64.c        # EFI 64-bit
│   │   │   │   ├── efi_stub_64.S   # EFI stub 64-bit
│   │   │   │   ├── efi_thunk_64.S  # EFI thunk 64-bit
│   │   │   │   ├── quirks.c        # EFI quirks
│   │   │   │   └── runtime-map.c   # Runtime mapping
│   │   │   ├── intel/              # Intel platforms
│   │   │   │   ├── iosf_mbi.c      # IOSF mailbox
│   │   │   │   └── pmc.c           # Power management
│   │   │   ├── uv/                 # SGI UV
│   │   │   │   ├── uv_irq.c        # UV interrupts
│   │   │   │   ├── uv_time.c       # UV time
│   │   │   │   └── tlb_uv.c        # UV TLB
│   │   │   ├── olpc/               # OLPC support
│   │   │   │   ├── olpc.c          # OLPC core
│   │   │   │   └── olpc_ofw.c      # OLPC OpenFirmware
│   │   │   ├── ce4100/             # Intel CE4100
│   │   │   │   └── ce4100.c        # CE4100 support
│   │   │   ├── intel-mid/          # Intel MID
│   │   │   │   ├── device_libs/    # Device libraries
│   │   │   │   ├── sfi.c           # Simple Firmware Interface
│   │   │   │   └── pwr.c           # Power management
│   │   │   ├── intel-quark/        # Intel Quark
│   │   │   │   └── imr.c           # Isolated Memory Regions
│   │   │   └── scx200/             # National Semi SCx200
│   │   │       ├── scx200.c        # SCx200 support
│   │   │       └── gpio.c          # GPIO support
│   │   ├── power/
│   │   │   ├── cpu.c               # CPU power management
│   │   │   └── hibernate.c         # Hibernation x86
│   │   ├── events/                 # Performance events
│   │   │   ├── core.c              # Events core
│   │   │   ├── intel/              # Intel PMU
│   │   │   │   ├── core.c          # Intel core PMU
│   │   │   │   ├── uncore.c        # Uncore PMU
│   │   │   │   ├── cqm.c           # Cache QoS Monitoring
│   │   │   │   ├── pt.c            # Processor Trace
│   │   │   │   └── bts.c           # Branch Trace Store
│   │   │   ├── amd/                # AMD PMU
│   │   │   │   ├── core.c          # AMD core PMU
│   │   │   │   ├── uncore.c        # AMD uncore
│   │   │   │   └── ibs.c           # Instruction Based Sampling
│   │   │   └── rapl.c              # RAPL energy monitoring
│   │   ├── xen/                    # Xen paravirtualization
│   │   │   ├── enlighten.c         # Xen enlightenment
│   │   │   ├── mmu.c               # Xen MMU
│   │   │   ├── time.c              # Xen time
│   │   │   ├── grant-table.c       # Grant tables
│   │   │   ├── p2m.c               # Physical-to-machine
│   │   │   └── xen-asm.S           # Xen assembly
│   │   ├── kvm/                    # KVM support
│   │   │   ├── vmx/                # Intel VMX
│   │   │   │   ├── vmx.c           # VMX core
│   │   │   │   ├── vmenter.S       # VM entry
│   │   │   │   ├── vmcs12.c        # VMCS shadowing
│   │   │   │   ├── nested.c        # Nested virtualization
│   │   │   │   └── pmu_intel.c     # Intel PMU virtualization
│   │   │   ├── svm/                # AMD SVM
│   │   │   │   ├── svm.c           # SVM core
│   │   │   │   ├── vmenter.S       # SVM entry
│   │   │   │   ├── nested.c        # Nested SVM
│   │   │   │   └── pmu.c           # AMD PMU virtualization
│   │   │   ├── kvm.c               # KVM core x86
│   │   │   ├── x86.c               # KVM x86 emulation
│   │   │   ├── mmu.c               # KVM MMU
│   │   │   ├── emulate.c           # Instruction emulation
│   │   │   ├── lapic.c             # Local APIC virtualization
│   │   │   ├── i8259.c             # PIC virtualization
│   │   │   ├── irq.c               # Interrupt virtualization
│   │   │   ├── irq_comm.c          # IRQ communication
│   │   │   ├── ioapic.c            # I/O APIC virtualization
│   │   │   ├── timer.c             # Timer virtualization
│   │   │   ├── cpuid.c             # CPUID virtualization
│   │   │   ├── pmu.c               # PMU virtualization
│   │   │   ├── mtrr.c              # MTRR virtualization
│   │   │   ├── hyperv.c            # Hyper-V enlightenments
│   │   │   └── trace.h             # KVM tracing
│   │   ├── crypto/                 # Crypto acceleration
│   │   │   ├── aes-x86_64-asm_64.S # AES assembly
│   │   │   ├── aesni-intel_asm.S   # AES-NI assembly
│   │   │   ├── aesni-intel_glue.c  # AES-NI glue
│   │   │   ├── ghash-clmulni-intel_asm.S # GHASH CLMUL
│   │   │   ├── ghash-clmulni-intel_glue.c # GHASH glue
│   │   │   ├── crc32c-intel_glue.c # CRC32C Intel
│   │   │   ├── crct10dif-pclmul_asm.S # CRC T10DIF
│   │   │   ├── sha1_ssse3_asm.S    # SHA1 SSSE3
│   │   │   ├── sha256-ssse3-asm.S  # SHA256 SSSE3
│   │   │   ├── sha512-ssse3-asm.S  # SHA512 SSSE3
│   │   │   └── poly1305_glue.c     # Poly1305 glue
│   │   ├── lib/
│   │   │   ├── cache-smp.c         # SMP cache operations
│   │   │   ├── checksum_32.S       # Checksum 32-bit
│   │   │   ├── checksum_64.S       # Checksum 64-bit
│   │   │   ├── clear_page_64.S     # Clear page 64-bit
│   │   │   ├── copy_page_64.S      # Copy page 64-bit
│   │   │   ├── copy_user_64.S      # Copy to/from user 64-bit
│   │   │   ├── csum-copy_64.S      # Checksum copy 64-bit
│   │   │   ├── delay.c             # Delay functions
│   │   │   ├── getuser.S           # Get from user
│   │   │   ├── putuser.S           # Put to user
│   │   │   ├── memcpy_64.S         # Memcpy 64-bit
│   │   │   ├── memmove_64.S        # Memmove 64-bit
│   │   │   ├── memset_64.S         # Memset 64-bit
│   │   │   ├── msr.c               # MSR access
│   │   │   ├── msr-reg.S           # MSR register access
│   │   │   ├── rwsem.S             # Read-write semaphores
│   │   │   ├── string_32.c         # String functions 32-bit
│   │   │   ├── strstr_32.c         # strstr 32-bit
│   │   │   ├── usercopy.c          # User copy functions
│   │   │   ├── usercopy_32.c       # User copy 32-bit
│   │   │   ├── usercopy_64.c       # User copy 64-bit
│   │   │   └── x86-opcode-map.txt  # Opcode map
│   │   ├── tools/                  # Outils x86
│   │   │   └── relocs.c            # Outil relocations
│   │   ├── um/                     # User Mode Linux
│   │   │   ├── asm/                # Headers UML
│   │   │   ├── shared/             # Code partagé UML
│   │   │   └── sys-x86_64/         # UML x86_64
│   │   ├── oprofile/               # OProfile support
│   │   │   ├── init.c              # OProfile init
│   │   │   ├── backtrace.c         # Backtrace
│   │   │   └── nmi_int.c           # NMI interface
│   │   ├── purgatory/              # Purgatory for kexec
│   │   │   ├── purgatory.c         # Purgatory code
│   │   │   ├── setup-x86_64.S      # Setup 64-bit
│   │   │   ├── stack.S             # Stack setup
│   │   │   └── string.c            # String functions
│   │   ├── realmode/               # Real mode code
│   │   │   ├── init.c              # Real mode init
│   │   │   └── rm/                 # Real mode sources
│   │   │       ├── header.S        # Real mode header
│   │   │       ├── trampoline_64.S # Trampoline 64-bit
│   │   │       ├── stack.S         # Stack real mode
│   │   │       ├── reboot.S        # Reboot real mode
│   │   │       └── wakeup_asm.S    # Wakeup assembly
│   │   ├── video/                  # Video BIOS
│   │   │   └── fbdev.c             # Framebuffer device
│   │   ├── hyperv/                 # Hyper-V support
│   │   │   ├── hv_init.c           # Hyper-V init
│   │   │   ├── mmu.c               # Hyper-V MMU
│   │   │   └── nested.c            # Nested Hyper-V
│   │   └── include/                # Headers x86
│   │       ├── asm/
│   │       │   ├── processor.h     # Définitions processeur
│   │       │   ├── cpufeature.h    # Features CPU
│   │       │   ├── msr.h           # MSR definitions
│   │       │   ├── msr-index.h     # Index MSR
│   │       │   ├── pgtable.h       # Page tables
│   │       │   ├── pgtable_types.h # Types page tables
│   │       │   ├── pgtable-2level.h # Page tables 2-level
│   │       │   ├── pgtable-3level.h # Page tables 3-level
│   │       │   ├── pgtable_32.h    # Page tables 32-bit
│   │       │   ├── pgtable_64.h    # Page tables 64-bit
│   │       │   ├── page.h          # Page definitions
│   │       │   ├── page_types.h    # Types de pages
│   │       │   ├── page_32.h       # Pages 32-bit
│   │       │   ├── page_64.h       # Pages 64-bit
│   │       │   ├── atomic.h        # Opérations atomiques
│   │       │   ├── bitops.h        # Opérations bits
│   │       │   ├── spinlock.h      # Spinlocks x86
│   │       │   ├── spinlock_types.h # Types spinlocks
│   │       │   ├── rwlock.h        # Read-write locks
│   │       │   ├── mutex.h         # Mutex x86
│   │       │   ├── barrier.h       # Memory barriers
│   │       │   ├── cmpxchg.h       # Compare-and-exchange
│   │       │   ├── smp.h           # SMP definitions
│   │       │   ├── percpu.h        # Per-CPU variables
│   │       │   ├── current.h       # Current task
│   │       │   ├── thread_info.h   # Thread info
│   │       │   ├── switch_to.h     # Context switch
│   │       │   ├── fpu/            # FPU headers
│   │       │   │   ├── api.h       # FPU API
│   │       │   │   ├── internal.h  # FPU internal
│   │       │   │   ├── types.h     # FPU types
│   │       │   │   └── xstate.h    # Extended state
│   │       │   ├── apic.h          # APIC definitions
│   │       │   ├── io_apic.h       # I/O APIC
│   │       │   ├── irq.h           # IRQ x86
│   │       │   ├── irq_vectors.h   # Vecteurs IRQ
│   │       │   ├── hw_irq.h        # Hardware IRQ
│   │       │   ├── desc.h          # Descriptors
│   │       │   ├── segment.h       # Segmentation
│   │       │   ├── desc_defs.h     # Définitions descripteurs
│   │       │   ├── paravirt.h      # Paravirtualization
│   │       │   ├── paravirt_types.h # Types paravirt
│   │       │   ├── hypervisor.h    # Hypervisor detection
│   │       │   ├── kvm_para.h      # KVM paravirt
│   │       │   ├── xen/            # Xen headers
│   │       │   │   ├── hypervisor.h # Xen hypervisor
│   │       │   │   ├── interface.h  # Interface Xen
│   │       │   │   └── page.h      # Xen pages
│   │       │   ├── kvm.h           # KVM definitions
│   │       │   ├── vmx.h           # VMX definitions
│   │       │   ├── svm.h           # SVM definitions
│   │       │   ├── mce.h           # Machine check
│   │       │   ├── nmi.h           # NMI definitions
│   │       │   ├── traps.h         # Traps
│   │       │   ├── proto.h         # Function prototypes
│   │       │   ├── setup.h         # Setup definitions
│   │       │   ├── bootparam.h     # Boot parameters
│   │       │   ├── e820.h          # E820 memory map
│   │       │   ├── mpspec.h        # MP specification
│   │       │   ├── topology.h      # CPU topology
│   │       │   ├── numa.h          # NUMA definitions
│   │       │   ├── mmzone.h        # Memory zones
│   │       │   ├── sparsemem.h     # Sparse memory
│   │       │   ├── highmem.h       # High memory
│   │       │   ├── fixmap.h        # Fixed mappings
│   │       │   ├── vsyscall.h      # vsyscall
│   │       │   ├── vdso.h          # vDSO
│   │       │   ├── syscall.h       # System calls
│   │       │   ├── ptrace.h        # Process tracing
│   │       │   ├── user.h          # User structures
│   │       │   ├── user_32.h       # User 32-bit
│   │       │   ├── user_64.h       # User 64-bit
│   │       │   ├── signal.h        # Signals x86
│   │       │   ├── uaccess.h       # User access
│   │       │   ├── uaccess_32.h    # User access 32-bit
│   │       │   ├── uaccess_64.h    # User access 64-bit
│   │       │   ├── checksum.h      # Checksum
│   │       │   ├── checksum_32.h   # Checksum 32-bit
│   │       │   ├── checksum_64.h   # Checksum 64-bit
│   │       │   ├── io.h            # I/O operations
│   │       │   ├── iomap.h         # I/O mapping
│   │       │   ├── dma.h           # DMA definitions
│   │       │   ├── dma-mapping.h   # DMA mapping
│   │       │   ├── iommu.h         # IOMMU support
│   │       │   ├── swiotlb.h       # Software IOMMU
│   │       │   ├── tsc.h           # Time Stamp Counter
│   │       │   ├── timer.h         # Timer x86
│   │       │   ├── delay.h         # Delay functions
│   │       │   ├── timex.h         # Time extensions
│   │       │   ├── clocksource.h   # Clock sources
│   │       │   ├── hpet.h          # HPET timer
│   │       │   ├── rtc.h           # Real Time Clock
│   │       │   ├── alternative.h   # Code alternatives
│   │       │   ├── asm.h           # Assembly macros
│   │       │   ├── linkage.h       # Linkage macros
│   │       │   ├── calling.h       # Calling conventions
│   │       │   ├── frame.h         # Frame pointer
│   │       │   ├── unwind.h        # Stack unwinding
│   │       │   ├── stacktrace.h    # Stack tracing
│   │       │   ├── ftrace.h        # Function tracing
│   │       │   ├── kprobes.h       # Kernel probes
│   │       │   ├── perf_event.h    # Performance events
│   │       │   ├── hw_breakpoint.h # Hardware breakpoints
│   │       │   ├── debugreg.h      # Debug registers
│   │       │   ├── kdebug.h        # Kernel debug
│   │       │   ├── kgdb.h          # KGDB support
│   │       │   ├── crypto/         # Crypto headers
│   │       │   │   ├── aes.h       # AES definitions
│   │       │   │   ├── ghash.h     # GHASH
│   │       │   │   └── serpent.h   # Serpent cipher
│   │       │   ├── acpi.h          # ACPI x86
│   │       │   ├── mpspec.h        # Multiprocessor spec
│   │       │   ├── sfi.h           # Simple Firmware Interface
│   │       │   ├── olpc.h          # OLPC support
│   │       │   ├── uv/             # SGI UV headers
│   │       │   │   ├── uv.h        # UV definitions
│   │       │   │   ├── uv_hub.h    # UV hub
│   │       │   │   └── uv_mmrs.h   # UV memory mapped registers
│   │       │   ├── intel-mid.h     # Intel MID
│   │       │   ├── ce4100.h        # Intel CE4100
│   │       │   ├── efi.h           # EFI definitions
│   │       │   ├── pci.h           # PCI x86
│   │       │   ├── pci_x86.h       # PCI x86 specific
│   │       │   ├── pci-direct.h    # Direct PCI access
│   │       │   ├── pci-functions.h # PCI functions
│   │       │   ├── mmconfig.h      # PCI MMCONFIG
│   │       │   ├── device.h        # Device model x86
│   │       │   ├── dmi.h           # DMI support
│   │       │   ├── cpu.h           # CPU definitions
│   │       │   ├── cpu_device_id.h # CPU device ID
│   │       │   ├── cacheinfo.h     # Cache information
│   │       │   ├── microcode.h     # Microcode
│   │       │   ├── bugs.h          # CPU bugs
│   │       │   ├── vmware.h        # VMware support
│   │       │   ├── hyperv.h        # Hyper-V definitions
│   │       │   ├── mshyperv.h      # MS Hyper-V
│   │       │   ├── kasan.h         # KASAN x86
│   │       │   ├── kaslr.h         # KASLR
│   │       │   ├── pkeys.h         # Protection Keys
│   │       │   ├── mpx.h           # Memory Protection Extensions
│   │       │   ├── cet.h           # Control-flow Enforcement
│   │       │   ├── umip.h          # User-Mode Instruction Prevention
│   │       │   ├── smap.h          # Supervisor Mode Access Prevention
│   │       │   ├── smep.h          # Supervisor Mode Execution Prevention
│   │       │   ├── resctrl.h       # Resource Control
│   │       │   ├── intel_rdt.h     # Intel RDT
│   │       │   ├── cacheflush.h    # Cache flushing
│   │       │   ├── tlbflush.h      # TLB flushing
│   │       │   ├── string.h        # String functions
│   │       │   ├── string_32.h     # String 32-bit
│   │       │   ├── string_64.h     # String 64-bit
│   │       │   ├── div64.h         # 64-bit division
│   │       │   ├── math.h          # Math functions
│   │       │   ├── byteorder.h     # Byte ordering
│   │       │   ├── bitsperlong.h   # Bits per long
│   │       │   ├── posix_types.h   # POSIX types
│   │       │   ├── types.h         # Basic types
│   │       │   ├── stat.h          # Stat structures
│   │       │   ├── statfs.h        # Statfs structures
│   │       │   ├── shmparam.h      # Shared memory parameters
│   │       │   ├── socket.h        # Socket definitions
│   │       │   ├── sockios.h       # Socket ioctls
│   │       │   ├── termbits.h      # Terminal bits
│   │       │   ├── termios.h       # Terminal I/O
│   │       │   ├── poll.h          # Poll definitions
│   │       │   ├── fcntl.h         # File control
│   │       │   ├── ioctl.h         # I/O control
│   │       │   ├── ioctls.h        # I/O control commands
│   │       │   ├── mman.h          # Memory management
│   │       │   ├── resource.h      # Resource limits
│   │       │   ├── auxvec.h        # Auxiliary vector
│   │       │   ├── binfmt_elf.h    # ELF binary format
│   │       │   ├── elf.h           # ELF definitions
│   │       │   ├── module.h        # Module support x86
│   │       │   ├── export.h        # Export symbols
│   │       │   ├── sections.h      # Section definitions
│   │       │   ├── cache.h         # Cache definitions
│   │       │   ├── bug.h           # Bug handling
│   │       │   ├── word-at-a-time.h # Word-at-a-time operations
│   │       │   ├── exec.h          # Execution
│   │       │   ├── mmu.h           # MMU definitions
│   │       │   ├── mmu_context.h   # MMU context
│   │       │   ├── ldt.h           # Local Descriptor Table
│   │       │   ├── desc.h          # Descriptor handling
│   │       │   ├── required-features.h # Required CPU features
│   │       │   ├── disabled-features.h # Disabled CPU features
│   │       │   ├── cpufeatures.h   # CPU feature flags
│   │       │   ├── processor-flags.h # Processor flags
│   │       │   ├── cpumask.h       # CPU masks
│   │       │   ├── topology.h      # NUMA topology
│   │       │   ├── numa.h          # NUMA support
│   │       │   ├── numa_64.h       # NUMA 64-bit
│   │       │   ├── numa_32.h       # NUMA 32-bit
│   │       │   ├── mmzone.h        # Memory zones
│   │       │   ├── sparsemem.h     # Sparse memory model
│   │       │   ├── memory_hotplug.h # Memory hotplug
│   │       │   ├── mem_encrypt.h   # Memory encryption
│   │       │   ├── set_memory.h    # Set memory attributes
│   │       │   ├── pat.h           # Page Attribute Table
│   │       │   ├── cpa.h           # Change page attributes
│   │       │   ├── pkeys.h         # Memory Protection Keys
│   │       │   ├── pkru.h          # Protection Key Rights Register
│   │       │   ├── special_insns.h # Special instructions
│   │       │   ├── fpu-internal.h  # FPU internal
│   │       │   ├── i387.h          # i387 FPU
│   │       │   ├── xcr.h           # Extended Control Registers
│   │       │   ├── xsave.h         # XSAVE instructions
│   │       │   ├── fpu_emulator.h # FPU emulator
│   │       │   ├── math_emu.h      # Math emulation
│   │       │   ├── suspend.h       # Suspend/resume
│   │       │   ├── hibernate.h     # Hibernation
│   │       │   ├── suspend_32.h    # Suspend 32-bit
│   │       │   ├── suspend_64.h    # Suspend 64-bit
│   │       │   ├── bootparam_utils.h # Boot parameter utils
│   │       │   ├── setup_arch.h    # Architecture setup
│   │       │   ├── prom.h          # Firmware interface
│   │       │   ├── realmode.h      # Real mode
│   │       │   ├── bios32.h        # BIOS32 service
│   │       │   ├── fb.h            # Framebuffer x86
│   │       │   ├── vga.h           # VGA support
│   │       │   ├── vesa.h          # VESA support
│   │       │   ├── boot.h          # Boot definitions
│   │       │   ├── bootinfo.h      # Boot information
│   │       │   ├── crash.h         # Crash dump
│   │       │   ├── kexec.h         # Kexec support
│   │       │   ├── emergency-restart.h # Emergency restart
│   │       │   ├── reboot.h        # Reboot support
│   │       │   ├── reboot_fixups.h # Reboot fixups
│   │       │   ├── idle.h          # Idle support
│   │       │   ├── genapic.h       # Generic APIC
│   │       │   ├── geode.h         # AMD Geode
│   │       │   ├── gpio.h          # GPIO support
│   │       │   ├── hw_irq.h        # Hardware IRQ
│   │       │   ├── irq_work.h      # IRQ work
│   │       │   ├── hardirq.h       # Hard IRQ context
│   │       │   ├── softirq.h       # Soft IRQ context
│   │       │   ├── preempt.h       # Preemption
│   │       │   ├── thread_info.h   # Thread information
│   │       │   ├── stackprotector.h # Stack protection
│   │       │   ├── stacktrace.h    # Stack tracing
│   │       │   ├── unwind.h        # Stack unwinding
│   │       │   ├── unwind_hints.h  # Unwind hints
│   │       │   ├── orc_types.h     # ORC unwinder types
│   │       │   ├── nospec-branch.h # Speculative execution
│   │       │   ├── mds.h           # Microarchitectural Data Sampling
│   │       │   ├── spec-ctrl.h     # Speculation control
│   │       │   ├── cpufeature.h    # CPU feature detection
│   │       │   ├── cpu_entry_area.h # CPU entry area
│   │       │   ├── pti.h           # Page Table Isolation
│   │       │   ├── kvm_host.h      # KVM host
│   │       │   ├── kvm_emulate.h   # KVM emulation
│   │       │   ├── kvm_page_track.h # KVM page tracking
│   │       │   ├── kvm_cache_regs.h # KVM cache registers
│   │       │   ├── virtext.h       # Virtualization extensions
│   │       │   ├── vmx.h           # Intel VMX
│   │       │   ├── vmxfeatures.h   # VMX features
│   │       │   ├── svm.h           # AMD SVM
│   │       │   ├── trace/          # Tracing headers
│   │       │   │   ├── exceptions.h # Exception tracing
│   │       │   │   ├── irq_vectors.h # IRQ vector tracing
│   │       │   │   └── fpu.h       # FPU tracing
│   │       │   └── uapi/           # User API headers
│   │       │       ├── bpf_perf_event.h # BPF perf events
│   │       │       ├── kvm.h       # KVM user interface
│   │       │       ├── kvm_para.h  # KVM paravirt user
│   │       │       ├── mce.h       # MCE user interface
│   │       │       ├── msr.h       # MSR user interface
│   │       │       ├── perf_regs.h # Perf registers
│   │       │       ├── ptrace.h    # Ptrace user interface
│   │       │       ├── setup.h     # Setup user interface
│   │       │       ├── sigcontext.h # Signal context
│   │       │       ├── signal.h    # Signal user interface
│   │       │       ├── stat.h      # Stat user interface
│   │       │       ├── statfs.h    # Statfs user interface
│   │       │       ├── svm.h       # SVM user interface
│   │       │       ├── unistd.h    # System call numbers
│   │       │       ├── vm86.h      # VM86 mode
│   │       │       └── vsyscall.h  # vsyscall user interface
│   │       └── uapi/               # User API headers
│   │           └── asm/
│   │               ├── auxvec.h    # Auxiliary vector
│   │               ├── bitsperlong.h # Bits per long
│   │               ├── byteorder.h # Byte order
│   │               ├── errno.h     # Error numbers
│   │               ├── fcntl.h     # File control
│   │               ├── ioctl.h     # I/O control
│   │               ├── ioctls.h    # I/O control commands
│   │               ├── mman.h      # Memory management
│   │               ├── msgbuf.h    # Message buffer
│   │               ├── param.h     # Parameters
│   │               ├── poll.h      # Poll interface
│   │               ├── posix_types.h # POSIX types
│   │               ├── resource.h  # Resource limits
│   │               ├── sembuf.h    # Semaphore buffer
│   │               ├── shmbuf.h    # Shared memory buffer
│   │               ├── siginfo.h   # Signal information
│   │               ├── socket.h    # Socket interface
│   │               ├── sockios.h   # Socket I/O control
│   │               ├── stat.h      # File status
│   │               ├── statfs.h    # File system status
│   │               ├── swab.h      # Byte swapping
│   │               ├── termbits.h  # Terminal control bits
│   │               ├── termios.h   # Terminal I/O
│   │               ├── types.h     # Data types
│   │               └── unistd.h    # System calls
│   ├── arm64/                      # ARM 64-bit architecture
│   │   ├── boot/                   # ARM64 boot
│   │   │   ├── dts/               # Device Tree Sources
│   │   │   │   ├── actions/       # Actions Semi
│   │   │   │   ├── allwinner/     # Allwinner
│   │   │   │   ├── amd/           # AMD
│   │   │   │   ├── amlogic/       # Amlogic
│   │   │   │   ├── apm/           # Applied Micro
│   │   │   │   ├── arm/           # ARM Ltd
│   │   │   │   ├── broadcom/      # Broadcom
│   │   │   │   ├── cavium/        # Cavium
│   │   │   │   ├── exynos/        # Samsung Exynos
│   │   │   │   ├── freescale/     # NXP/Freescale
│   │   │   │   ├── hisilicon/     # HiSilicon
│   │   │   │   ├── marvell/       # Marvell
│   │   │   │   ├── mediatek/      # MediaTek
│   │   │   │   ├── nvidia/        # NVIDIA
│   │   │   │   ├── qcom/          # Qualcomm
│   │   │   │   ├── realtek/       # Realtek
│   │   │   │   ├── renesas/       # Renesas
│   │   │   │   ├── rockchip/      # Rockchip
│   │   │   │   ├── socionext/     # Socionext
│   │   │   │   ├── sprd/          # Spreadtrum
│   │   │   │   ├── ti/            # Texas Instruments
│   │   │   │   └── xilinx/        # Xilinx
│   │   │   └── Makefile           # Build boot images
│   │   ├── configs/               # Default configurations
│   │   │   └── defconfig          # Default config
│   │   ├── crypto/                # ARM64 crypto
│   │   │   ├── aes-ce-cipher.c    # AES Crypto Extension
│   │   │   ├── aes-ce-ccm-glue.c  # AES-CCM glue
│   │   │   ├── aes-ce-glue.c      # AES CE glue
│   │   │   ├── aes-cipher-core.S  # AES cipher core
│   │   │   ├── aes-cipher-glue.c  # AES cipher glue
│   │   │   ├── aes-glue.c         # AES glue code
│   │   │   ├── aes-modes.S        # AES modes
│   │   │   ├── aes-neon.S         # AES NEON
│   │   │   ├── aes-neonbs-core.S  # AES NEON bit-sliced
│   │   │   ├── aes-neonbs-glue.c  # AES NEON BS glue
│   │   │   ├── chacha-neon-core.S # ChaCha20 NEON
│   │   │   ├── chacha-neon-glue.c # ChaCha20 glue
│   │   │   ├── crc32-ce-core.S    # CRC32 Crypto Extension
│   │   │   ├── crc32-ce-glue.c    # CRC32 CE glue
│   │   │   ├── crct10dif-ce-core.S # CRC T10DIF CE
│   │   │   ├── crct10dif-ce-glue.c # CRC T10DIF glue
│   │   │   ├── ghash-ce-core.S    # GHASH CE
│   │   │   ├── ghash-ce-glue.c    # GHASH CE glue
│   │   │   ├── nh-neon-core.S     # NH hash NEON
│   │   │   ├── nhpoly1305-neon-glue.c # NHPoly1305 glue
│   │   │   ├── poly1305-core.S    # Poly1305 core
│   │   │   ├── poly1305-glue.c    # Poly1305 glue
│   │   │   ├── sha1-ce-core.S     # SHA-1 CE
│   │   │   ├── sha1-ce-glue.c     # SHA-1 CE glue
│   │   │   ├── sha2-ce-core.S     # SHA-2 CE
│   │   │   ├── sha2-ce-glue.c     # SHA-2 CE glue
│   │   │   ├── sha256-core.S      # SHA-256 core
│   │   │   ├── sha256-glue.c      # SHA-256 glue
│   │   │   ├── sha3-ce-core.S     # SHA-3 CE
│   │   │   ├── sha3-ce-glue.c     # SHA-3 CE glue
│   │   │   ├── sha512-ce-core.S   # SHA-512 CE
│   │   │   ├── sha512-ce-glue.c   # SHA-512 CE glue
│   │   │   ├── sha512-core.S      # SHA-512 core
│   │   │   ├── sha512-glue.c      # SHA-512 glue
│   │   │   └── sm3-ce-glue.c      # SM3 CE glue
│   │   ├── hyperv/                # Hyper-V ARM64
│   │   │   └── mshyperv.c         # MS Hyper-V ARM64
│   │   ├── kernel/                # ARM64 kernel core
│   │   │   ├── acpi.c             # ACPI support
│   │   │   ├── acpi_numa.c        # ACPI NUMA
│   │   │   ├── acpi_parking_protocol.c # ACPI parking
│   │   │   ├── alternative.c      # Code alternatives
│   │   │   ├── armv8_deprecated.c # Deprecated ARMv8
│   │   │   ├── asm-offsets.c      # Assembly offsets
│   │   │   ├── cacheinfo.c        # Cache information
│   │   │   ├── cpu-reset.S        # CPU reset
│   │   │   ├── cpu_errata.c       # CPU errata
│   │   │   ├── cpu_ops.c          # CPU operations
│   │   │   ├── cpufeature.c       # CPU features
│   │   │   ├── cpuidle.c          # CPU idle
│   │   │   ├── cpuinfo.c          # CPU information
│   │   │   ├── crash_core.c       # Crash core
│   │   │   ├── crash_dump.c       # Crash dump
│   │   │   ├── debug-monitors.c   # Debug monitors
│   │   │   ├── efi.c              # EFI support
│   │   │   ├── efi-entry.S        # EFI entry point
│   │   │   ├── efi-rt-wrapper.S   # EFI runtime wrapper
│   │   │   ├── entry.S            # Exception entry
│   │   │   ├── entry-common.c     # Entry common code
│   │   │   ├── entry-fpsimd.S     # FP/SIMD entry
│   │   │   ├── fpsimd.c           # FP/SIMD support
│   │   │   ├── ftrace.c           # Function tracing
│   │   │   ├── head.S             # Kernel head
│   │   │   ├── hibernate.c        # Hibernation
│   │   │   ├── hw_breakpoint.c    # Hardware breakpoints
│   │   │   ├── hyp-stub.S         # Hypervisor stub
│   │   │   ├── image.h            # Kernel image
│   │   │   ├── insn.c             # Instruction manipulation
│   │   │   ├── io.c               # I/O operations
│   │   │   ├── irq.c              # IRQ handling
│   │   │   ├── jump_label.c       # Jump labels
│   │   │   ├── kaslr.c            # KASLR support
│   │   │   ├── kexec_image.c      # Kexec image
│   │   │   ├── kgdb.c             # KGDB support
│   │   │   ├── machine_kexec.c    # Machine kexec
│   │   │   ├── machine_kexec_file.c # Kexec file loading
│   │   │   ├── module.c           # Module support
│   │   │   ├── module-plts.c      # Module PLTs
│   │   │   ├── paravirt.c         # Paravirtualization
│   │   │   ├── pci.c              # PCI support
│   │   │   ├── perf_callchain.c   # Perf call chains
│   │   │   ├── perf_event.c       # Performance events
│   │   │   ├── perf_regs.c        # Perf registers
│   │   │   ├── process.c          # Process management
│   │   │   ├── psci.c             # PSCI support
│   │   │   ├── ptrace.c           # Process tracing
│   │   │   ├── reloc_test_core.c  # Relocation test
│   │   │   ├── relocate_kernel.S  # Kernel relocation
│   │   │   ├── return_address.c   # Return address
│   │   │   ├── sdei.c             # SDEI support
│   │   │   ├── setup.c            # System setup
│   │   │   ├── signal.c           # Signal handling
│   │   │   ├── signal32.c         # 32-bit signal handling
│   │   │   ├── sleep.S            # Sleep assembly
│   │   │   ├── smp.c              # SMP support
│   │   │   ├── smp_spin_table.c   # SMP spin table
│   │   │   ├── stacktrace.c       # Stack tracing
│   │   │   ├── suspend.c          # Suspend/resume
│   │   │   ├── sys.c              # System calls
│   │   │   ├── sys32.c            # 32-bit system calls
│   │   │   ├── sys_compat.c       # Compat system calls
│   │   │   ├── syscall.c          # System call handling
│   │   │   ├── time.c             # Time management
│   │   │   ├── topology.c         # CPU topology
│   │   │   ├── tracepoint.c       # Tracepoints
│   │   │   ├── traps.c            # Exception handling
│   │   │   ├── vdso.c             # vDSO support
│   │   │   ├── vmlinux.lds.S      # Linker script
│   │   │   └── kprobes/           # Kernel probes
│   │   │       ├── kprobes.c      # Kprobes core
│   │   │       ├── decode-insn.c  # Instruction decode
│   │   │       ├── decode-insn.h  # Decode header
│   │   │       ├── simulate-insn.c # Instruction simulation
│   │   │       └── simulate-insn.h # Simulation header
│   │   ├── kvm/                   # KVM ARM64
│   │   │   ├── debug.c            # Debug support
│   │   │   ├── guest.c            # Guest management
│   │   │   ├── handle_exit.c      # Exit handling
│   │   │   ├── hyp.S              # Hypervisor assembly
│   │   │   ├── hyp-init.S         # Hypervisor init
│   │   │   ├── inject_fault.c     # Fault injection
│   │   │   ├── irq.h              # IRQ definitions
│   │   │   ├── regmap.c           # Register mapping
│   │   │   ├── reset.c            # Reset handling
│   │   │   ├── sys_regs.c         # System registers
│   │   │   ├── sys_regs.h         # System register header
│   │   │   ├── sys_regs_generic_v8.c # Generic v8 registers
│   │   │   ├── trace.h            # Tracing definitions
│   │   │   ├── va_layout.c        # Virtual address layout
│   │   │   ├── vgic-sys-reg-v3.c  # VGICv3 system registers
│   │   │   └── hyp/               # Hypervisor code
│   │   │       ├── debug-sr.c     # Debug state save/restore
│   │   │       ├── entry.S        # Hypervisor entry
│   │   │       ├── fpsimd.S       # FP/SIMD hypervisor
│   │   │       ├── hyp-entry.S    # Hypervisor entry point
│   │   │       ├── switch.c       # Context switching
│   │   │       ├── sysreg-sr.c    # System register save/restore
│   │   │       ├── timer-sr.c     # Timer save/restore
│   │   │       ├── tlb.c          # TLB management
│   │   │       └── vgic-v3-sr.c   # VG